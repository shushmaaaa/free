 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=54078
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 581) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-08-16 11:57:22 CEST
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=33210
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=32976
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: create database bikes
	;
[unknown] LOG:  connection received: host=::1 port=60518
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='bikes';
 LOG:  received smart shutdown request
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 844) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=44156
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
[unknown] LOG:  connection received: host=127.0.0.1 port=44168
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres NOTICE:  database "bikes" does not exist, skipping
postgres STATEMENT:  DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=44174
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
[unknown] LOG:  connection received: host=127.0.0.1 port=56816
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=45254
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 671) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-08-16 14:15:20 CEST
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=::1 port=33494
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=48508
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=48512
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=48528
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
[unknown] LOG:  connection received: host=::1 port=37892
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=54758
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=43542
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=::1 port=45568
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
postgres ERROR:  relation "bikes" does not exist at character 15
postgres STATEMENT:  SELECT * FROM bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=49864
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: CREATE TABLE bikes();
[unknown] LOG:  connection received: host=::1 port=55366
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN bike_id SERIAL PRIMARY KEY;
[unknown] LOG:  connection received: host=::1 port=48628
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'bikes' AND c.column_name = 'bike_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'bikes' AND column_name = 'bike_id';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16387';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16387' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16387' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16387' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16387'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16387'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16387')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16387' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16387' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN type VARCHAR(50) NOT NULL;
[unknown] LOG:  connection received: host=::1 port=49748
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'bikes' AND column_name = 'type' AND data_type = 'character varying' AND character_maximum_length = 50;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16387';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16387' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16387' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16387' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16387'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16387'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16387')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16387' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16387' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN size INT NOT NULL;
[unknown] LOG:  connection received: host=::1 port=38890
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'bikes' AND column_name = 'size' AND data_type = 'integer'
freecodecamp ERROR:  syntax error at or near "DFAULT" at character 57
freecodecamp STATEMENT:  ALTER TABLE bikes ADD COLUMN available BOOLEAN NOT NULL DFAULT TRUE;
freecodecamp LOG:  statement: ALTER TABLE bikes ADD COLUMN available BOOLEAN NOT NULL DEFAULT TRUE;
[unknown] LOG:  connection received: host=::1 port=34142
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'bikes' AND column_name = 'available' AND data_type = 'boolean' AND column_default = 'true';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16387';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16387' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16387' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16387' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16387'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16387'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16387')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16387' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16387' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=35628
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM customers;
postgres ERROR:  relation "customers" does not exist at character 15
postgres STATEMENT:  SELECT * FROM customers;
freecodecamp LOG:  statement: CREATE TABLE customers();
[unknown] LOG:  connection received: host=::1 port=42194
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM customers;
freecodecamp LOG:  statement: ALTER TABLE customers ADD COLUMN customer_id  SERIAL PRIMARY KEY;
[unknown] LOG:  connection received: host=::1 port=34290
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'customers' AND c.column_name = 'customer_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'customers' AND column_name = 'customer_id';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(custoemrs)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(custoemrs)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(cutomers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16400';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16400' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16400' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16400' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16400'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16400'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16400')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16400' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16400' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE customers ADD COLUMN phone VARCHAR(15) NOT NULL UNIQUE;
[unknown] LOG:  connection received: host=::1 port=60802
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'customers' AND column_name = 'phone' AND data_type = 'character varying' AND character_maximum_length = 15;
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'UNIQUE';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=::1 port=54402
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'customers' AND column_name = 'name' AND data_type = 'character varying' AND character_maximum_length = 40;
freecodecamp ERROR:  syntax error at or near "d" at character 1
freecodecamp STATEMENT:  d
	d
	ALTER TABLE customers ADD COLUMN name VARCHAR(40) NOT NULL ;
freecodecamp LOG:  statement: ALTER TABLE customers ADD COLUMN name VARCHAR(40) NOT NULL ;
[unknown] LOG:  connection received: host=::1 port=53116
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'customers' AND column_name = 'name' AND data_type = 'character varying' AND character_maximum_length = 40;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16400';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16400' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16400' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16400' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16400'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16400'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16400')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16400' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16400' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: CREATE TABLE rentals();
[unknown] LOG:  connection received: host=::1 port=34112
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM rentals;
freecodecamp LOG:  statement: ALTER TABLE rentals  ADD COLUMN  rental_id SERIAL PRIMARY KEY;
[unknown] LOG:  connection received: host=::1 port=45524
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'rentals' AND c.column_name = 'rental_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'rentals' AND column_name = 'rental_id';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16414';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16414' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16414' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16414' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16414'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16414'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16414')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16414' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16414' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN customer_id INT NOT NULL;
[unknown] LOG:  connection received: host=::1 port=51450
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'rentals' AND column_name = 'customer_id' AND data_type = 'integer'
freecodecamp LOG:  statement: ALTER TABLE retnals ADD FOREIGN KEY(cutomer_id) REFERENCES customer(customer_id);
freecodecamp ERROR:  relation "retnals" does not exist
freecodecamp STATEMENT:  ALTER TABLE retnals ADD FOREIGN KEY(cutomer_id) REFERENCES customer(customer_id);
freecodecamp LOG:  statement: ALTER TABLE rentals ADD FOREIGN KEY(cutomer_id) REFERENCES customer(customer_id);
freecodecamp ERROR:  relation "customer" does not exist
freecodecamp STATEMENT:  ALTER TABLE rentals ADD FOREIGN KEY(cutomer_id) REFERENCES customer(customer_id);
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=::1 port=38374
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: ALTER TABLE rentals ADD FOREIGN KEY(cutomer_id) REFERENCES customers(customer_id);
freecodecamp ERROR:  column "cutomer_id" referenced in foreign key constraint does not exist
freecodecamp STATEMENT:  ALTER TABLE rentals ADD FOREIGN KEY(cutomer_id) REFERENCES customers(customer_id);
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16400';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16400' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16400' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16400' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16400'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16400'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16400')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16400' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16400' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=48198
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
[unknown] LOG:  connection received: host=::1 port=48200
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: ALTER TABLE rentals ADD FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
[unknown] LOG:  connection received: host=::1 port=50910
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16414';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16414' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16414' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16414' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16414')
	                     UNION ALL VALUES ('16414'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16414' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16414'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16414'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16414')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16414' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16414' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16414' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN  bike_id INT NOT NULL;
[unknown] LOG:  connection received: host=::1 port=40246
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'rentals' AND column_name = 'bike_id' AND data_type = 'integer'
freecodecamp LOG:  statement: ALTER TABLE rentals ADD FOREIGN KEY(bike_id) REFERENCES bikes(bike_id);
[unknown] LOG:  connection received: host=::1 port=47052
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp ERROR:  syntax error at or near "DEFUALT" at character 58
freecodecamp STATEMENT:  ALTER TABLE rentals ADD COLUMN date_rented DATE NOT NULL DEFUALT NOW();
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN date_rented DATE NOT NULL DEFAuLT NOW();
[unknown] LOG:  connection received: host=::1 port=45554
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'rentals' AND column_name = 'date_rented' AND data_type = 'date' AND column_default = 'now()';
freecodecamp ERROR:  syntax error at or near "ADD" at character 1
freecodecamp STATEMENT:  ADD TABLE rentals ADD COLUMN date_returned DATE;
freecodecamp LOG:  statement: ALTER TABLE rentals ADD COLUMN date_returned DATE;
[unknown] LOG:  connection received: host=::1 port=58038
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'rentals' AND column_name = 'date_returned' AND data_type = 'date';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16414';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16414' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16414' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16414' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16414')
	                     UNION ALL VALUES ('16414'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16414' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16414'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16414'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16414')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16414' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16414' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16414' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=::1 port=46772
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16387';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16387' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16387' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16387' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16387')
	                     UNION ALL VALUES ('16387'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16387' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16387'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16387'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16387')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16387' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16387' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16387' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=44452
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp ERROR:  syntax error at or near ")" at character 29
freecodecamp STATEMENT:  INSERT INTO bikes(type,size,) VALUES('Moutnain',27);
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Moutnain',27);
[unknown] LOG:  connection received: host=::1 port=41542
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp ERROR:  syntax error at or near "*" at character 8
freecodecamp STATEMENT:  DELETE * FORM bikes;
freecodecamp ERROR:  syntax error at or near "*" at character 8
freecodecamp STATEMENT:  DELETE * FROM bikes;
freecodecamp LOG:  statement: DELETE FROM bikes;
[unknown] LOG:  connection received: host=::1 port=60272
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16387';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16387' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16387' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16387' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16387')
	                     UNION ALL VALUES ('16387'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16387' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16387'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16387'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16387')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16387' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16387' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16387' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=56556
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Moutain',27);
[unknown] LOG:  connection received: host=::1 port=50026
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
[unknown] LOG:  connection received: host=::1 port=49142
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: select * from bikes;
[unknown] LOG:  connection received: host=::1 port=51148
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: select * from bikes;
[unknown] LOG:  connection received: host=::1 port=33408
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp ERROR:  syntax error at or near "=" at character 29
freecodecamp STATEMENT:  ALTER TABLE bikes ALTER type='Mountain' where bike_id=2
	;
[unknown] LOG:  connection received: host=127.0.0.1 port=38210
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=::1 port=57480
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
[unknown] LOG:  connection received: host=127.0.0.1 port=50976
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: select * from bikes;
[unknown] LOG:  connection received: host=::1 port=44346
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp ERROR:  syntax error at or near "*" at character 8
freecodecamp STATEMENT:  delete * from bikes;
freecodecamp LOG:  statement: delete from bikes;
[unknown] LOG:  connection received: host=::1 port=36688
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Mountain',27);
[unknown] LOG:  connection received: host=::1 port=60662
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=27;
freecodecamp LOG:  statement: select * from bikes;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Mountain',28);
[unknown] LOG:  connection received: host=::1 port=44998
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=28;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Mountain',29);
[unknown] LOG:  connection received: host=::1 port=39900
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Mountain' AND size=29;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Road',27);
[unknown] LOG:  connection received: host=::1 port=34910
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Road' AND size=27;
freecodecamp LOG:  statement: select * from bikes;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('Road',28),('Road',29);
[unknown] LOG:  connection received: host=::1 port=41676
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Road' AND size=28;
postgres LOG:  statement: SELECT * FROM bikes WHERE type='Road' AND size=29;
freecodecamp LOG:  statement: INSERT INTO bikes(type,size) VALUES('BMX',19),('BMX',20),('BMX',21);
[unknown] LOG:  connection received: host=::1 port=47360
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT * FROM bikes WHERE type='BMX' AND size=19;
postgres LOG:  statement: SELECT * FROM bikes WHERE type='BMX' AND size=20;
postgres LOG:  statement: SELECT * FROM bikes WHERE type='BMX' AND size=21;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16387';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16387' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16387' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16387' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16387')
	                     UNION ALL VALUES ('16387'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16387' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16387'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16387'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16387')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16387' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16387' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16387' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: select * from bikes;
freecodecamp FATAL:  terminating connection due to administrator command
freecodecamp FATAL:  terminating connection due to administrator command
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  received smart shutdown request
 LOG:  background worker "logical replication launcher" (PID 2360) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=36302
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
[unknown] LOG:  connection received: host=127.0.0.1 port=36312
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres NOTICE:  database "bikes" does not exist, skipping
postgres STATEMENT:  DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=36318
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=60660
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=60662
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 626) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-08-17 06:14:12 CEST
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=42608
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=42614
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=42624
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
 LOG:  background worker "logical replication launcher" (PID 1829) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-08-17 06:15:31 CEST
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=46358
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=127.0.0.1 port=46366
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=46368
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=41704
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=41716
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=34598
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(bikes)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16464';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16464' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16464' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16464' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16464')
	                     UNION ALL VALUES ('16464'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16464' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16464'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16464'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16464')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16464' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16464' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16464' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=56380
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
freecodecamp ERROR:  syntax error at or near "=" at character 23
freecodecamp STATEMENT:  UPDATE bikes available=False;
freecodecamp ERROR:  syntax error at or near "=" at character 23
freecodecamp STATEMENT:  UPDATE bikes available=False;
freecodecamp ERROR:  syntax error at or near "=" at character 17
freecodecamp STATEMENT:  UPDATE available=False from bikes;
freecodecamp ERROR:  syntax error at or near "=" at character 21
freecodecamp STATEMENT:  UPDATE set available=False from bikes;
freecodecamp LOG:  statement: UPDATE bikes set available=False;
[unknown] LOG:  connection received: host=::1 port=50368
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
[unknown] LOG:  connection received: host=127.0.0.1 port=38294
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=44986
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
freecodecamp ERROR:  syntax error at or near "=" at character 21
freecodecamp STATEMENT:  UPDATE set available=False from bikes;
freecodecamp LOG:  statement: UPDATE bikes SET available=True WHERE type != 'BMX';
[unknown] LOG:  connection received: host=::1 port=35976
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true AND type='BMX'
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false AND type<>'BMX'
postgres LOG:  statement: SELECT bike_id FROM bikes
[unknown] LOG:  connection received: host=127.0.0.1 port=41056
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=51424
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=60776
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=40552
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=51410
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=39200
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=46920
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=46000
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=38592
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=38022
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id,type,size FROM bikes WHERE available = True ORDER BY bike_id
freecodecamp FATAL:  terminating connection due to administrator command
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  received smart shutdown request
 LOG:  background worker "logical replication launcher" (PID 2409) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=39918
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
[unknown] LOG:  connection received: host=127.0.0.1 port=39924
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres NOTICE:  database "bikes" does not exist, skipping
postgres STATEMENT:  DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=39940
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, false);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, false);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=49074
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=49078
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp ERROR:  syntax error at or near "form" at character 10
freecodecamp STATEMENT:  select * form bikes;
freecodecamp LOG:  statement: select * from bikes;
[unknown] LOG:  connection received: host=127.0.0.1 port=49440
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=58922
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM  bikes where bike_id=7 AND available=True
[unknown] LOG:  connection received: host=127.0.0.1 port=57574
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=40984
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM  bikes where bike_id=7 AND available=True
freecodecamp LOG:  statement: UPDATE bikes SET available = True;
[unknown] LOG:  connection received: host=::1 port=36334
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=true
postgres LOG:  statement: SELECT bike_id FROM bikes WHERE available=false
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(c)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=::1 port=45888
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=39330
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=::1 port=43942
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=::1 port=43950
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=55364
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=55374
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM  bikes where bike_id=1 AND available=True
[unknown] LOG:  connection received: host=127.0.0.1 port=56544
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone='555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=44274
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO customers(name,phone) VALUES('Me','555-5555')
[unknown] LOG:  connection received: host=::1 port=57882
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT customer_id FROM customers WHERE phone = '555-5555' AND name = 'Me'
freecodecamp ERROR:  syntax error at or near "zd" at character 1
freecodecamp STATEMENT:  zd
	 
	SELECT * FROM cutomers;
freecodecamp LOG:  statement: SELECT * FROM cutomers;
freecodecamp ERROR:  relation "cutomers" does not exist at character 15
freecodecamp STATEMENT:  SELECT * FROM cutomers;
freecodecamp LOG:  statement: SELECT * FROM customers;
freecodecamp LOG:  statement: select * from  rentals;
freecodecamp LOG:  statement: SELECT * FROM bikes;
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  received smart shutdown request
 LOG:  background worker "logical replication launcher" (PID 615) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2024-01-18 16:44:14 CET
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=127.0.0.1 port=42302
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
[unknown] LOG:  connection received: host=127.0.0.1 port=42310
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS bikes;
postgres NOTICE:  database "bikes" does not exist, skipping
postgres STATEMENT:  DROP DATABASE IF EXISTS bikes;
postgres LOG:  statement: CREATE DATABASE bikes WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE bikes OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=127.0.0.1 port=42314
postgres LOG:  connection authorized: user=postgres database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.bikes (
	    bike_id integer NOT NULL,
	    type character varying(50) NOT NULL,
	    size integer NOT NULL,
	    available boolean DEFAULT true NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.bikes OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.bikes_bike_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.bikes_bike_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.bikes_bike_id_seq OWNED BY public.bikes.bike_id;
postgres LOG:  statement: CREATE TABLE public.customers (
	    customer_id integer NOT NULL,
	    phone character varying(15) NOT NULL,
	    name character varying(40) NOT NULL
	);
postgres LOG:  statement: ALTER TABLE public.customers OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.customers_customer_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.customers_customer_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.customers_customer_id_seq OWNED BY public.customers.customer_id;
postgres LOG:  statement: CREATE TABLE public.rentals (
	    rental_id integer NOT NULL,
	    customer_id integer NOT NULL,
	    bike_id integer NOT NULL,
	    date_rented date DEFAULT now() NOT NULL,
	    date_returned date
	);
postgres LOG:  statement: ALTER TABLE public.rentals OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.rentals_rental_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.rentals_rental_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.rentals_rental_id_seq OWNED BY public.rentals.rental_id;
postgres LOG:  statement: ALTER TABLE ONLY public.bikes ALTER COLUMN bike_id SET DEFAULT nextval('public.bikes_bike_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.customers ALTER COLUMN customer_id SET DEFAULT nextval('public.customers_customer_id_seq'::regclass);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals ALTER COLUMN rental_id SET DEFAULT nextval('public.rentals_rental_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (1, 'Mountain', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (2, 'Mountain', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (3, 'Mountain', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (4, 'Road', 27, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (5, 'Road', 28, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (6, 'Road', 29, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (7, 'BMX', 19, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (8, 'BMX', 20, true);
postgres LOG:  statement: INSERT INTO public.bikes VALUES (9, 'BMX', 21, true);
postgres LOG:  statement: INSERT INTO public.customers VALUES (1, '555-5555', 'Me');
postgres LOG:  statement: SELECT pg_catalog.setval('public.bikes_bike_id_seq', 9, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.customers_customer_id_seq', 1, true);
postgres LOG:  statement: SELECT pg_catalog.setval('public.rentals_rental_id_seq', 1, false);
postgres LOG:  statement: ALTER TABLE ONLY public.bikes
	    ADD CONSTRAINT bikes_pkey PRIMARY KEY (bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_phone_key UNIQUE (phone);
postgres LOG:  statement: ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customers_pkey PRIMARY KEY (customer_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_pkey PRIMARY KEY (rental_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_bike_id_fkey FOREIGN KEY (bike_id) REFERENCES public.bikes(bike_id);
postgres LOG:  statement: ALTER TABLE ONLY public.rentals
	    ADD CONSTRAINT rentals_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=49162
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
[unknown] LOG:  connection received: host=127.0.0.1 port=58040
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(customers)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16392';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16392' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16392' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16392' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16392')
	                     UNION ALL VALUES ('16392'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16392' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16392'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16392'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16392')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16392' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16392' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16392' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(rentals)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16397';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16397' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16397' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16397' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16397')
	                     UNION ALL VALUES ('16397'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16397' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16397'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16397'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16397')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16397' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16397' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16397' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=47820
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=34260
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 1 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=34274
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=34282
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=34298
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           1','1')
[unknown] LOG:  connection received: host=127.0.0.1 port=34314
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=1
[unknown] LOG:  connection received: host=::1 port=43984
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
freecodecamp LOG:  statement: SELECT * FROM rentals;
freecodecamp LOG:  statement: SELECT * FROM bikes;
freecodecamp LOG:  statement: SELECT * FROM bikes order by bike_id;
[unknown] LOG:  connection received: host=127.0.0.1 port=45054
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=35758
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 2 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=35760
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=35768
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=35778
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           1','2')
[unknown] LOG:  connection received: host=127.0.0.1 port=35780
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=2
[unknown] LOG:  connection received: host=127.0.0.1 port=35786
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size,type FROM bikes WHERE bike_id=2
[unknown] LOG:  connection received: host=::1 port=44330
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=::1 port=47594
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=56288
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=56294
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 3 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=58802
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=58812
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=58824
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           1','3')
[unknown] LOG:  connection received: host=127.0.0.1 port=58836
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=3
[unknown] LOG:  connection received: host=127.0.0.1 port=58850
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size,type FROM bikes WHERE bike_id=3
[unknown] LOG:  connection received: host=::1 port=56150
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=56936
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=56952
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 4 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=58844
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=58852
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=58862
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           1','4')
[unknown] LOG:  connection received: host=127.0.0.1 port=58870
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=4
[unknown] LOG:  connection received: host=127.0.0.1 port=58880
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size,type FROM bikes WHERE bike_id=4
[unknown] LOG:  connection received: host=::1 port=42484
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=::1 port=55666
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=::1 port=44216
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=39414
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=39422
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 5 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=52360
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=52364
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='555-5555'
[unknown] LOG:  connection received: host=127.0.0.1 port=52370
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           1','5')
[unknown] LOG:  connection received: host=127.0.0.1 port=52386
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=5
[unknown] LOG:  connection received: host=127.0.0.1 port=52392
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size,type FROM bikes WHERE bike_id=5
[unknown] LOG:  connection received: host=::1 port=33434
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '555-5555' AND name = 'Me'
[unknown] LOG:  connection received: host=127.0.0.1 port=46636
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=46642
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 6 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=60298
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '000-0000'
[unknown] LOG:  connection received: host=127.0.0.1 port=49324
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO customers(name, phone) VALUES('Test', '000-0000')
[unknown] LOG:  connection received: host=127.0.0.1 port=49334
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='000-0000'
[unknown] LOG:  connection received: host=127.0.0.1 port=49344
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           2','6')
[unknown] LOG:  connection received: host=127.0.0.1 port=49360
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=6
[unknown] LOG:  connection received: host=127.0.0.1 port=49372
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size,type FROM bikes WHERE bike_id=6
[unknown] LOG:  connection received: host=::1 port=46506
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '000-0000' AND name = 'Test'
[unknown] LOG:  connection received: host=127.0.0.1 port=48854
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id
[unknown] LOG:  connection received: host=127.0.0.1 port=48858
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT available FROM bikes WHERE bike_id = 7 AND available = true
[unknown] LOG:  connection received: host=127.0.0.1 port=51760
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT name FROM customers WHERE phone = '000-0000'
[unknown] LOG:  connection received: host=127.0.0.1 port=51764
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT customer_id FROM customers WHERE phone='000-0000'
[unknown] LOG:  connection received: host=127.0.0.1 port=51776
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: INSERT INTO rentals(customer_id,bike_id) VALUES('           2','7')
[unknown] LOG:  connection received: host=127.0.0.1 port=51784
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: UPDATE bikes SET available = false WHERE bike_id=7
[unknown] LOG:  connection received: host=127.0.0.1 port=51800
freecodecamp LOG:  connection authorized: user=freecodecamp database=bikes application_name=psql SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, bits=256, compression=off)
freecodecamp LOG:  statement: SELECT size,type FROM bikes WHERE bike_id=7
[unknown] LOG:  connection received: host=::1 port=36308
postgres LOG:  connection authorized: user=postgres database=bikes
postgres LOG:  statement: SELECT rental_id FROM customers INNER JOIN rentals USING(customer_id) WHERE phone = '000-0000' AND name = 'Test'
freecodecamp LOG:  statement: SELECT * FROM bikes order by bike_id;
freecodecamp LOG:  statement: SELECT * FROM customers;
freecodecamp LOG:  statement: SELECT * FROM rentals;
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  received smart shutdown request
 LOG:  background worker "logical replication launcher" (PID 1335) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
